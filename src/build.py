from luau import indent_block
from luau.convert import from_list, from_dict, mark_as_literal
from luau.roblox import write_script
from src.config import get_config_data
import os
import sys

def write_as_literal_str_list(type_name: str, string_list: list[str], use_union_type: bool) -> str:
	if use_union_type:
		enum_str_list = []

		for i, enum_item_name in enumerate(string_list):
			if i > 0:			
				enum_str_list.append(f"\n| \"{enum_item_name}\"")
			else:
				enum_str_list.append(f"\"{enum_item_name}\"")

		return f"export type {type_name} = (" + "\n".join(enum_str_list) + "\n\n)"
	else:
		return f"export type {type_name} = string"

def main():
	config_data = get_config_data()

	build_path = config_data["build_path"]
	content = [
		"--strict",
		"-- this script was generated by nightcycle/pseudo-enum, do not manually edit",
		"",
	]

	enum_name_list = []

	for enum_name, enum_list in config_data["enums"].items():
		enum_name_list.append(enum_name)
		enum_list_content = from_list(enum_list, multi_line=False, skip_initial_indent=True)
		
		enum_literal_type = write_as_literal_str_list(enum_name, enum_list, config_data["use_union_types_for_export"])

		pseudo_block = [
			"\n" + enum_literal_type,
			f"\nlocal {enum_name}List = {enum_list_content}"
		]
		
		content += pseudo_block


	enum_name_literal_type = write_as_literal_str_list("EnumName", enum_name_list, config_data["use_union_types_for_export"])
	content.append(enum_name_literal_type)

	content += [
		"return {",
	]

	get_enum_items_function_block = [
		"\tgetEnumItems = function(enumName: EnumName): {[number]: string}",
	]
	get_enum_item_from_value_function_block = [
		"\tgetEnumItemFromValue = function(enumName: EnumName, value: number): string",
	]
	get_value_from_enum_item_block = [
		"\ngetValueFromEnumItem = function(enumName: EnumName, enumItem: string): number",
	]
	for i, enum_name in enumerate(enum_name_list):
		get_enum_items_if_block = []
		get_enum_item_from_value_if_block = []
		get_value_from_enum_item_if_block = []
		if i == 0:
			get_enum_items_if_block.append(f"if enumName == \"{enum_name}\" then")
			get_enum_item_from_value_if_block.append(f"if enumName == \"{enum_name}\" then")
			get_value_from_enum_item_if_block.append(f"if enumName == \"{enum_name}\" then")
		else:
			get_enum_items_if_block.append(f"elseif enumName == \"{enum_name}\" then")
			get_enum_item_from_value_if_block.append(f"elseif enumName == \"{enum_name}\" then")
			get_value_from_enum_item_if_block.append(f"elseif enumName == \"{enum_name}\" then")

		get_enum_items_if_block.append(f"\treturn table.clone({enum_name}List)")
		get_enum_item_from_value_if_block.append(f"\tif {enum_name}List[value] then return {enum_name}List[value] else error(\"no enum item of value \"..tostring(value)..\" in enum \"..tostring(enumName)) end")
		get_value_from_enum_item_if_block.append(f"\tlocal index = table.find({enum_name}List, enumItem)")
		get_value_from_enum_item_if_block.append(f"\tif index then")
		get_value_from_enum_item_if_block.append(f"\t\tassert(index)")
		get_value_from_enum_item_if_block.append(f"\t\treturn index")
		get_value_from_enum_item_if_block.append(f"\telse")
		get_value_from_enum_item_if_block.append(f"\t\terror(\"no enumItem \"..enumItem..\" in {enum_name}\")")
		get_value_from_enum_item_if_block.append(f"\tend")
		get_enum_items_function_block += indent_block(get_enum_items_if_block, indent_count=2)
		get_enum_item_from_value_function_block += indent_block(get_enum_item_from_value_if_block, indent_count=2)
		get_value_from_enum_item_block += indent_block(get_value_from_enum_item_if_block, indent_count=2)

	get_enum_items_function_block += [
		"\t\tend",
		"\t\terror(\"bad enum name: \"..tostring(enumName))",
		"\tend,",
	]

	get_enum_item_from_value_function_block += [
		"\t\tend",
		"\t\terror(\"bad enum name: \"..tostring(enumName))",
		"\tend,",
	]

	get_value_from_enum_item_block += [
		"\t\tend",
		"\t\terror(\"bad enum name: \"..tostring(enumName))",
		"\tend,",
	]

	content += get_enum_items_function_block
	content += get_enum_item_from_value_function_block
	content += get_value_from_enum_item_block

	for enum_name, enum_list in config_data["enums"].items():
		entry = {}
		for v in enum_list:
			if config_data["use_union_types_for_tree"]:
				entry[v] = mark_as_literal(f"\"{v}\" :: {enum_name}")
			else:
				entry[v] = mark_as_literal(f"\"{v}\"")
		entry_block = f"{enum_name} = " + from_dict(entry, skip_initial_indent=True) + ","
		content.append(entry_block)

	content.append("}")
	# print(build_path)
	write_script(build_path, "\n".join(content), write_as_directory=False)
