name: Release
on:
  release:
    types: [published]

jobs:
  get_published_release:
    runs-on: ubuntu-latest

    outputs:
      release_id: ${{ steps.release_info.outputs.release_id }}
      upload_url: ${{ steps.release_info.outputs.upload_url }}
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      repo_desc: ${{ steps.release_info.outputs.repo_desc }}
      repo_name: ${{ steps.release_info.outputs.repo_name }}
      repo_owner_name: ${{ steps.release_info.outputs.repo_owner_name }}

    steps:
      - name: Set Release Info
        id: release_info
        shell: bash
        run: |
          echo "release_id=${{ github.event.release.id }}" >> $GITHUB_OUTPUT
          echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_OUTPUT
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT

          repo_owner_name="${{ github.repository_owner }}"
          echo "repo_owner_name=$repo_owner_name" >> $GITHUB_OUTPUT

          repo_name="${{ github.repository }}"
          forward_repo_pattern="${repo_owner_name}/"
          empty_str=""
          repo_name="${repo_name/$forward_repo_pattern/$empty_str}"
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT

          description_prefix="\"description\":"
          curl -sL "https://api.github.com/repos/$repo_owner_name/$repo_name" > desc.text
          desc=$(<desc.text)
          desc=$(echo "$desc" | grep -F "$description_prefix" | head -n 1)
          desc="${desc/$description_prefix/$empty_str}"
          repo_desc=$(echo "$desc" | grep -o '"[^"]*"')
          echo "repo_desc=$repo_desc" >> $GITHUB_OUTPUT

  release:
    needs: [get_published_release]
    strategy:
      matrix:
        include:
          - os: windows-latest
            artifact-name: rojo-cloud-sync-windows-x86_64
            artifact-alias: rojo-cloud-sync-win64
            cargo-target: x86_64-pc-windows-msvc

    name: Build (${{ matrix.artifact-name }})
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.cargo-target }}

      - name: Build Binary
        run: cargo build --verbose --release --target ${{ matrix.cargo-target }}
        env:
          CARGO_TARGET_DIR: output

      - name: Setup Archive + Extension
        shell: bash
        run: |
          mkdir -p staging
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "output/${{ matrix.cargo-target }}/release/pseudo-enum.exe" staging/
            cd staging
            7z a ../release.zip *
          else
            cp "output/${{ matrix.cargo-target }}/release/pseudo-enum" staging/
            cd staging
            zip ../release.zip *
          fi

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact-name }}
          path: release.zip

      - name: Upload Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.get_published_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ matrix.artifact-name }}.zip
          asset_content_type: application/zip

      - name: Upload Binary to Release aliases
        if: ${{ matrix.artifact-alias != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.get_published_release.outputs.upload_url }}
          asset_path: release.zip
          asset_name: ${{ matrix.artifact-alias }}.zip
          asset_content_type: application/zip
