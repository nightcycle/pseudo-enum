--!strict
-- DO NOT EDIT MANUALLY!! This file was generated by nightcycle/pseudo-enum, edits will likely be overwritten!
export type TestEnum = "Test1" | "Test2"
local TestEnumList = table.freeze({ "Test1", "Test2" })
local TestEnumDict = table.freeze({
	Test1 = "Test1" :: "Test1",
	Test2 = "Test2" :: "Test2",
})
local TestEnumValueDict = table.freeze({
	Test1 = 1,
	Test2 = 2,
})
local TestEnumInverseValueDict = table.freeze({
	[1] = "Test1",
	[2] = "Test2",
})
local listTree = {
	TestEnum = TestEnumList,
}
table.freeze(listTree)
local valueTree = {
	TestEnum = TestEnumValueDict,
}
table.freeze(valueTree)
local invValueTree = {
	TestEnum = TestEnumInverseValueDict,
}
table.freeze(invValueTree)
export type EnumName = "TestEnum"
return {
	getEnumItems = function(enumName: EnumName)
		local list = listTree[enumName]
		assert(list, `invalid enumName: "{enumName}"`)
		return list
	end :: ("TestEnum") -> TestEnum,
	getEnumItemFromValue = function(enumName: EnumName, value: number)
		local dict = invValueTree[enumName]
		assert(dict, `invalid enumName: "{enumName}"`)
		local name = dict[value]
		assert(name, `invalid value: "{enumName}" -> {value}`)
		return name
	end :: ("TestEnum", number) -> TestEnum,
	getValueFromEnumItem = function(enumName: EnumName, name: string): number
		local dict = valueTree[enumName]
		assert(dict, `invalid enumName: "{enumName}"`)
		local value = dict[name]
		assert(value, `invalid value: "{enumName}" -> "{name}"`)
		return value
	end :: ("TestEnum", TestEnum) -> number,
	TestEnum = TestEnumDict,
}
